}
## calculate mean squared error
ar.perr2 <- mean(ar.perr.loop2^2, na.rm = TRUE)
ar.perr3 <- mean(ar.perr.loop3^2, na.rm = TRUE)
ar.perr4 <- mean(ar.perr.loop4^2, na.rm = TRUE)
ar.perr2 <- cbind(index = i, lag = 2, method = "AR2", MSE = ar.perr2)
ar.perr3 <- cbind(index = i, lag = 3, method = "AR3", MSE = ar.perr3)
ar.perr4 <- cbind(index = i, lag = 4, method = "AR4", MSE = ar.perr4)
perr <- rbind(perr, rbind(ar.perr2, ar.perr3, ar.perr4))
} else if(type == "DR"){
## dynamic regression time-series model
dr22 <- dynlm(FluPos ~ lag(FluPos, -2) + lag(gft, -2) + lag(FluPos, -52), data = learn)
dr33 <- dynlm(FluPos ~ lag(FluPos, -3) + lag(gft, -3) + lag(FluPos, -52), data = learn)
dr44 <- dynlm(FluPos ~ lag(FluPos, -4) + lag(gft, -4) + lag(FluPos, -52), data = learn)
dr20 <- dynlm(FluPos ~ lag(FluPos, -2) + lag(FluPos, -52), data = learn)
dr30 <- dynlm(FluPos ~ lag(FluPos, -3) + lag(FluPos, -52), data = learn)
dr40 <- dynlm(FluPos ~ lag(FluPos, -4) + lag(FluPos, -52), data = learn)
dr.perr.loop <- NULL
### Loop goes here ###
pred22 <- predict(dr22, newdata = valid)
pred33 <- predict(dr33, newdata = valid)
pred44 <- predict(dr44, newdata = valid)
pred20 <- predict(dr20, newdata = valid)
pred30 <- predict(dr30, newdata = valid)
pred40 <- predict(dr40, newdata = valid)
dr.perr22 <- mean((pred22 - valid$FluPos)^2, na.rm = TRUE)
dr.perr33 <- mean((pred33 - valid$FluPos)^2, na.rm = TRUE)
dr.perr44 <- mean((pred44 - valid$FluPos)^2, na.rm = TRUE)
dr.perr20 <- mean((pred20 - valid$FluPos)^2, na.rm = TRUE)
dr.perr30 <- mean((pred30 - valid$FluPos)^2, na.rm = TRUE)
dr.perr40 <- mean((pred40 - valid$FluPos)^2, na.rm = TRUE)
dr.perr22 <- cbind(index = i, lag = 2, method = "DR22", MSE = dr.perr22)
dr.perr33 <- cbind(index = i, lag = 3, method = "DR33", MSE = dr.perr33)
dr.perr44 <- cbind(index = i, lag = 4, method = "DR44", MSE = dr.perr44)
dr.perr20 <- cbind(index = i, lag = 2, method = "DR20", MSE = dr.perr20)
dr.perr30 <- cbind(index = i, lag = 3, method = "DR30", MSE = dr.perr30)
dr.perr40 <- cbind(index = i, lag = 4, method = "DR40", MSE = dr.perr40)
perr <- rbind(perr, rbind(dr.perr22, dr.perr33, dr.perr44, dr.perr20, dr.perr30, dr.perr40))
}
}
res <- data.frame(perr)
res$MSE <- as.numeric(res$MSE)
means <- as.data.frame(tapply(res$MSE, res$method, mean))
means$method<- rownames(means)
colnames(means)[1]<- "meanMSE"
res <- merge(res, means, by = "method")
return(res)
}
cvloop(can)
cvloop(can, type = "DR")
minYr <- as.numeric(format(minDate, '%Y'))
minWk <- as.numeric(format(minDate + 3, '%U'))
ts.flupos <- ts(can$FluPos, frequency = 52, start = c(minYr, minWk))
ts.can.learn <- window(ts.flupos, start = c(minYr, minWk),
end = c(2012, 53))
ts.can.valid <- window(ts.flupos, start = c(2012, 53))
ar.model <- arima(ts.can.learn, c(2,0,0), list(order = c(0,0,0)))
ar.pred <- NULL
lsize <- length(ts.can.learn)
for(k in 1:(length(ts.can.valid))){
ar.pred.loop <- forecast(Arima(
c(ts.can.learn[min(0,lsize - k): lsize], ts.can.valid[1:k]), model = ar.model), h = 3)
ar.pred <- rbind(ar.pred,
c(fit = unlist(ar.pred.loop$mean[3]),
LL = unlist(ar.pred.loop$lower[3,2]),
UL = unlist(ar.pred.loop$upper[3,2])))
}
ar.pred <- as.data.frame(ar.pred)
nrow(ar.pred)
ar.pred$Date <- can$Date[(length(can$Date)-137) : length(can$Date)]
ar.pred$FluPos <- can$FluPos[(length(can$FluPos)-137) : length(can$FluPos)]
str(ar.pred)
names(ar.pred)[2:3] <- c("LL", "UL")
ggplot(data = ar.pred, aes(x = Date, y = fit)) +
mytheme +
labs(x = "Year", y = "Count", title = "Two-year prediction from AR3") +
geom_ribbon(aes(ymin = LL, ymax = UL, fill = "95% confidence interval")) +
geom_line(aes(y = FluPos, col = "Actual")) +
geom_line(aes(col = "Predicted"))  +
scale_fill_brewer(name = "") +
scale_color_discrete(name = "") +
coord_cartesian(ylim = c(-5, 5000)) +
guides(color = guide_legend(order = 1),
fill = guide_legend(order = 2))
ar.forec <- forecast(ar.model, h = 138)
str(ar.forec)
ar.forec.df <- NULL
ar.forec.df$LL <- ar.forec$lower[,2]
ar.forec.df$UL <- ar.forec$upper[,2]
ar.forec.df$fit <- ar.forec$mean
ar.forec.df$Date <- ar.pred$Date
ar.forec.df$FluPos <- ar.pred$FluPos
ar.forec.df <- as.data.frame(ar.forec.df)
str(ar.forec.df)
ggplot(data = ar.forec.df, aes(x = Date, y = fit)) +
mytheme +
labs(x = "Year", y = "Count", title = "Long-term forecasts with SARIMA") +
geom_area(aes(y = FluPos, fill = "Actual")) +
geom_ribbon(aes(ymin = LL, ymax = UL), fill = "grey50", alpha = 0.2) +
geom_line(aes(col = "Forecasted"), size = 1.5)  +
scale_fill_brewer(name = "") +
scale_color_discrete(name = "")
ar.model <- arima(ts.can.learn, c(2,0,1), list(order = c(0,0,0)))
ar.pred <- NULL
lsize <- length(ts.can.learn)
for(k in 1:(length(ts.can.valid))){
ar.pred.loop <- forecast(Arima(
c(ts.can.learn[min(0,lsize - k): lsize], ts.can.valid[1:k]), model = ar.model), h = 3)
ar.pred <- rbind(ar.pred,
c(fit = unlist(ar.pred.loop$mean[3]),
LL = unlist(ar.pred.loop$lower[3,2]),
UL = unlist(ar.pred.loop$upper[3,2])))
}
ar.pred <- as.data.frame(ar.pred)
nrow(ar.pred)
ar.pred$Date <- can$Date[(length(can$Date)-137) : length(can$Date)]
ar.pred$FluPos <- can$FluPos[(length(can$FluPos)-137) : length(can$FluPos)]
str(ar.pred)
names(ar.pred)[2:3] <- c("LL", "UL")
ar.forec <- forecast(ar.model, h = 138)
str(ar.forec)
ar.forec.df <- NULL
ar.forec.df$LL <- ar.forec$lower[,2]
ar.forec.df$UL <- ar.forec$upper[,2]
ar.forec.df$fit <- ar.forec$mean
ar.forec.df$Date <- ar.pred$Date
ar.forec.df$FluPos <- ar.pred$FluPos
ar.forec.df <- as.data.frame(ar.forec.df)
str(ar.forec.df)
ggplot(data = ar.forec.df, aes(x = Date, y = fit)) +
mytheme +
labs(x = "Year", y = "Count", title = "Long-term forecasts with SARIMA") +
geom_area(aes(y = FluPos, fill = "Actual")) +
geom_ribbon(aes(ymin = LL, ymax = UL), fill = "grey50", alpha = 0.2) +
geom_line(aes(col = "Forecasted"), size = 1.5)  +
scale_fill_brewer(name = "") +
scale_color_discrete(name = "")
ggplot(data = ar.forec.df, aes(x = Date, y = fit)) +
mytheme +
labs(x = "Year", y = "Count", title = "Two-year forecasts with SARIMA") +
geom_area(aes(y = FluPos, fill = "Actual")) +
geom_ribbon(aes(ymin = LL, ymax = UL, fill = "95% confidence interval")) +
geom_line(aes(col = "Forecasted"))  +
scale_fill_brewer(name = "") +
scale_color_discrete(name = "")
ggplot(data = ar.forec.df, aes(x = Date, y = fit)) +
mytheme +
labs(x = "Year", y = "Count", title = "Two-year forecasts with SARIMA") +
geom_ribbon(aes(ymin = LL, ymax = UL, fill = "95% confidence interval")) +
geom_line(aes(y = FluPos, col = "Actual")) +
geom_line(aes(col = "Forecasted"))  +
scale_fill_brewer(name = "") +
scale_color_discrete(name = "")
ggplot(data = ar.pred, aes(x = Date, y = fit)) +
mytheme +
labs(x = "Year", y = "Count", title = "Two-year prediction from AR3") +
geom_ribbon(aes(ymin = LL, ymax = UL, fill = "95% confidence interval")) +
geom_line(aes(y = FluPos, col = "Actual")) +
geom_line(aes(col = "Predicted"))  +
scale_fill_brewer(name = "") +
scale_color_discrete(name = "") +
coord_cartesian(ylim = c(-5, 5000)) +
guides(color = guide_legend(order = 1),
fill = guide_legend(order = 2))
dr.valid <- read.csv("Res/valid_DR.csv")
dr.valid$Date <- as.Date(as.character(dr.valid$Date), "%Y-%m-%d")
dr.valid <- dr.valid[,-1]
ggplot(data = dr.valid, aes(x = Date, y = fit)) +
mytheme +
labs(x = "Year", y = "Count", title = "Two-year prediction from DR33") +
geom_ribbon(aes(ymin = LL, ymax = UL, fill = "95% confidence interval")) +
geom_line(aes(y = FluPos, col = "Actual")) +
geom_line(aes(col = "Predicted"))  +
scale_fill_brewer(name = "") +
scale_color_discrete(name = "") +
coord_cartesian(ylim = c(-5, 5000)) +
guides(color = guide_legend(order = 1),
fill = guide_legend(order = 2))
ar.model <- arima(ts.can.learn, c(2,1,0), list(order = c(1,1,0)))
summary(ar.model)
ar.pred <- NULL
lsize <- length(ts.can.learn)
for(k in 1:(length(ts.can.valid))){
ar.pred.loop <- forecast(Arima(
c(ts.can.learn[min(0,lsize - k): lsize], ts.can.valid[1:k]), model = ar.model), h = 3)
ar.pred <- rbind(ar.pred,
c(fit = unlist(ar.pred.loop$mean[3]),
LL = unlist(ar.pred.loop$lower[3,2]),
UL = unlist(ar.pred.loop$upper[3,2])))
}
ar.pred <- as.data.frame(ar.pred)
ar.pred$Date <- can$Date[(length(can$Date)-137) : length(can$Date)]
ar.pred$FluPos <- can$FluPos[(length(can$FluPos)-137) : length(can$FluPos)]
names(ar.pred)[2:3] <- c("LL", "UL")
ar.forec <- forecast(ar.model, h = 138)
ar.forec.df <- NULL
ar.forec.df$LL <- ar.forec$lower[,2]
ar.forec.df$UL <- ar.forec$upper[,2]
ar.forec.df$fit <- ar.forec$mean
ar.forec.df$Date <- ar.pred$Date
ar.forec.df$FluPos <- ar.pred$FluPos
ar.forec.df <- as.data.frame(ar.forec.df)
ggplot(data = ar.forec.df, aes(x = Date, y = fit)) +
mytheme +
labs(x = "Year", y = "Count", title = "Two-year forecasts with SARIMA") +
geom_ribbon(aes(ymin = LL, ymax = UL, fill = "95% confidence interval")) +
geom_line(aes(y = FluPos, col = "Actual")) +
geom_line(aes(col = "Forecasted"))  +
scale_fill_brewer(name = "") +
scale_color_discrete(name = "")
library(dynlm)
library(dyn)
ts.gft <- ts(can$gft, frequency = 52, start = c(minYr, minWk))
ts.gft.can.learn <- window(ts.gft, start = c(minYr, minWk),
end = c(2012, 53))
ts.gft.can.valid <- window(ts.gft, start = c(2012, 53))
time(ts.gft)
can$Date
as.Date(time(ts.gft))
as.Date(uncliass(time(ts.gft)))
as.Date(unclass(time(ts.gft)))
library(zoo)
library(zoo)
as.Date(unclass(time(ts.gft)))
as.Date(time(ts.gft))
dr.learn.dt <- data.frame(Date = can$Date[1:length(ts.gft.can.learn)],
gft = ts.gft.can.learn, FluPos = ts.can.learn)
dr.model <- dynlm(FluPos ~ lag(FluPos, -3) + lag(gft, -3) + lag(FluPos, -52), data = dr.learn.dt)
dr.valid.dt <- data.frame(gft = ts.gft.can.valid, FluPos = ts.can.valid)
dr.model <- dynlm(FluPos ~ lag(FluPos, -3) + lag(gft, -3) + lag(FluPos, -52), data = dr.learn.dt)
dr.pred <- predict(dr.valid, newdata = dr.valid.dt, se.fit = TRUE)
dr.pred <- predict(dr.model, newdata = dr.valid.dt, se.fit = TRUE)
str(dr.pre)
str(dr.pred)
str(dr.valid) <- read.csv("Res/valid_DR.csv")
str(dr.valid)
ts.can.valid <- window(ts.flupos, start = c(2013, 1))
minYr <- as.numeric(format(minDate, '%Y'))
minWk <- as.numeric(format(minDate + 3, '%U'))
ts.flupos <- ts(can$FluPos, frequency = 52, start = c(minYr, minWk))
ts.can.learn <- window(ts.flupos, start = c(minYr, minWk),
end = c(2012, 52))
ts.can.valid <- window(ts.flupos, start = c(2013, 1))
ts.gft <- ts(can$gft, frequency = 52, start = c(minYr, minWk))
ts.gft.can.learn <- window(ts.gft, start = c(minYr, minWk),
end = c(2012, 52))
ts.gft.can.valid <- window(ts.gft, start = c(2013, 1))
dr.learn.dt <- data.frame(gft = ts.gft.can.learn, FluPos = ts.can.learn)
dr.valid.dt <- data.frame(gft = ts.gft.can.valid, FluPos = ts.can.valid)
dr.model <- dynlm(FluPos ~ lag(FluPos, -3) + lag(gft, -3) + lag(FluPos, -52), data = dr.learn.dt)
dr.pred <- predict(dr.model, newdata = dr.valid.dt, se.fit = TRUE)
str(dr.pred)
str(dr.valid)
minYr
minWk
gft <- read.csv("./Data/Google Trend.csv")
str(gft)
dr.learn.dt
head(dr.learn.dt)
minDate
head(dr.valid.dt)
str(dr.pred)
head(dr.pred)
head(dr.pred$fit)
dr.model <- dynlm(FluPos ~ lag(FluPos, -3) + lag(gft, -3), data = dr.learn.dt)
dr.pred <- predict(dr.model, newdata = dr.valid.dt, se.fit = TRUE)
head(dr.pred$fit)
head(dr.pred$fit)
head(dr.pred$fit, n = 20)
head(as.Date(time(dr.valid.dt)))
head(as.Date(time(ts.can.valid)))
head(as.Date(unclass(time(ts.can.valid))))
head(as.Date(unclass(time(ts.can.valid)), origin = minDate))
head(time(ts.can.valid))
length(ts.can.valid)
dr.valid <- data.frame(gft = ts.gft.can.learn, FluPos = ts.can.valid,
fit = dr.pred$fit,
UL = dr.pred$fit + 1.96*dr.pred$se.fit,
LL = dr.pred$fit - 1.96*dr.pred$se.fit,
Date = can$Date[(length(can$Date)-length(ts.can.valid)+1) : length(can$Date)])
length(ts.gft.can.valid)
dr.valid <- data.frame(gft = ts.gft.can.valid, FluPos = ts.can.valid,
fit = dr.pred$fit,
UL = dr.pred$fit + 1.96*dr.pred$se.fit,
LL = dr.pred$fit - 1.96*dr.pred$se.fit,
Date = can$Date[(length(can$Date)-length(ts.can.valid)+1) : length(can$Date)])
ggplot(data = dr.valid, aes(x = Date, y = fit)) +
mytheme +
labs(x = "Year", y = "Count", title = "Two-year prediction from DR33") +
geom_ribbon(aes(ymin = LL, ymax = UL, fill = "95% confidence interval")) +
geom_line(aes(y = FluPos, col = "Actual")) +
geom_line(aes(col = "Predicted"))  +
scale_fill_brewer(name = "") +
scale_color_discrete(name = "") +
coord_cartesian(ylim = c(-5, 5000)) +
guides(color = guide_legend(order = 1),
fill = guide_legend(order = 2))
dr.pred <- predict(dr.model, newdata = dr.valid.dt, interval = "predict", se.fit = TRUE)
str(dr.pred)
dr.valid <- data.frame(gft = ts.gft.can.valid, FluPos = ts.can.valid,
fit = dr.pred$fit,
UL = dr.pred$fit + 1.96*dr.pred$se.fit,
LL = dr.pred$fit - 1.96*dr.pred$se.fit,
Date = can$Date[(length(can$Date)-length(ts.can.valid)+1) : length(can$Date)])
ggplot(data = dr.valid, aes(x = Date, y = fit)) +
mytheme +
labs(x = "Year", y = "Count", title = "Two-year prediction from DR33") +
geom_ribbon(aes(ymin = LL, ymax = UL, fill = "95% confidence interval")) +
geom_line(aes(y = FluPos, col = "Actual")) +
geom_line(aes(col = "Predicted"))  +
scale_fill_brewer(name = "") +
scale_color_discrete(name = "") +
coord_cartesian(ylim = c(-5, 5000)) +
guides(color = guide_legend(order = 1),
fill = guide_legend(order = 2))
dr.pred <- predict(dr.model, newdata = dr.valid.dt, interval = "predict", se.fit = TRUE)
dr.valid <- data.frame(gft = ts.gft.can.valid, FluPos = ts.can.valid,
fit = dr.pred$fit,
UL = dr.pred$fit + 1.96*dr.pred$se.fit,
LL = dr.pred$fit - 1.96*dr.pred$se.fit,
Date = can$Date[(length(can$Date)-length(ts.can.valid)+1) : length(can$Date)])
ggplot(data = dr.valid, aes(x = Date, y = fit)) +
mytheme +
labs(x = "Year", y = "Count", title = "Two-year prediction from DR33") +
geom_ribbon(aes(ymin = LL, ymax = UL, fill = "95% confidence interval")) +
geom_line(aes(y = FluPos, col = "Actual")) +
geom_line(aes(col = "Predicted"))  +
scale_fill_brewer(name = "") +
scale_color_discrete(name = "") +
coord_cartesian(ylim = c(-5, 5000)) +
guides(color = guide_legend(order = 1),
fill = guide_legend(order = 2))
str(dr.valid)
head(dr.pred$fit["fit"])
head(dr.pred$fit[,"fit"])
head(dr.pred$fit[,"lwd"])
head(dr.pred$fit[,"lwr"])
head(dr.pred$fit[,"upr"])
dr.valid <- data.frame(gft = ts.gft.can.valid, FluPos = ts.can.valid,
fit = dr.pred$fit[,"fit"],
UL = dr.pred$fit[,"upr"],
LL = dr.pred$fit[,"lwr"],
Date = can$Date[(length(can$Date)-length(ts.can.valid)+1) : length(can$Date)])
ggplot(data = dr.valid, aes(x = Date, y = fit)) +
mytheme +
labs(x = "Year", y = "Count", title = "Two-year prediction from DR33") +
geom_ribbon(aes(ymin = LL, ymax = UL, fill = "95% confidence interval")) +
geom_line(aes(y = FluPos, col = "Actual")) +
geom_line(aes(col = "Predicted"))  +
scale_fill_brewer(name = "") +
scale_color_discrete(name = "") +
coord_cartesian(ylim = c(-5, 5000)) +
guides(color = guide_legend(order = 1),
fill = guide_legend(order = 2))
dr.model <- dynlm(FluPos ~ lag(FluPos, 3) + lag(gft, 3) + lag(FluPos, 52), data = dr.learn.dt)
dr.pred <- predict(dr.model, newdata = dr.valid.dt, interval = "predict", se.fit = TRUE)
dr.valid <- data.frame(gft = ts.gft.can.valid, FluPos = ts.can.valid,
fit = dr.pred$fit[,"fit"],
UL = dr.pred$fit[,"upr"],
LL = dr.pred$fit[,"lwr"],
Date = can$Date[(length(can$Date)-length(ts.can.valid)+1) : length(can$Date)])
ggplot(data = dr.valid, aes(x = Date, y = fit)) +
mytheme +
labs(x = "Year", y = "Count", title = "Two-year prediction from DR33") +
geom_ribbon(aes(ymin = LL, ymax = UL, fill = "95% confidence interval")) +
geom_line(aes(y = FluPos, col = "Actual")) +
geom_line(aes(col = "Predicted"))  +
scale_fill_brewer(name = "") +
scale_color_discrete(name = "") +
coord_cartesian(ylim = c(-5, 5000)) +
guides(color = guide_legend(order = 1),
fill = guide_legend(order = 2))
source("importData.R")
source("cvloop.R")
source("graphicSetting.R")
can.res <- rbind(cvloop(can, type = "AR", arpdq = c(2,1,0), arpdqs = c(1,1,0)),
cvloop(can, type = "DR"))
ggplot(data = subset(can.res, index == 1),
aes(x = method, y = meanMSE, fill = method)) + mytheme +
labs(x = "", y = "Cross-validation MSE", title = "Cross-validation MSE\n\nCanada") +
geom_bar(stat = "identity", width = 0.2) +
theme(legend.position = "none", axis.title.y=element_text(margin=margin(0,20,0,0))) +
coord_cartesian(ylim=c(20, 45))
can.res
arpdq = c(2,1,0)
arpdqs = c(1,1,0)
type = "AR"
dt = can
minYr <- as.numeric(format(minDate, '%Y'))
minWk <- as.numeric(format(minDate + 3, '%U'))
ts.flupos <- ts(dt$FluPos, frequency = 52, start = c(minYr, minWk))
ts.gft <- ts(dt$gft, frequency = 52, start = c(minYr, minWk))
trsize <- 5
perr <- NULL
i = 1
ts.learn <- window(ts.flupos, start = c(minYr + i, minWk),
end = c(minYr + trsize + i, minWk - 1))
ts.learn.gft <- window(ts.gft, start = c(minYr + i, minWk),
end = c(minYr + trsize + i, minWk - 1))
learn<- data.frame(FluPos = ts.learn, gft = ts.learn.gft)
ts.valid <- window(ts.flupos, start = c(minYr + i + trsize, minWk),
end = c(minYr + trsize + 1 + i, minWk - 1))
ts.valid.gft <- window(ts.gft, start = c(minYr + i + trsize, minWk),
end = c(minYr + trsize + 1 + i, minWk - 1))
valid<- data.frame(FluPos = ts.valid, gft = ts.valid.gft)
ar <- arima(ts.learn, arpdq, list(order = arpdqs))
ar
summary(ar)
arpdq
str(ar)
ar$arma
ar.perr.loop2 <- NULL
ar.perr.loop3 <- NULL
ar.perr.loop4 <- NULL
lsize <- length(ts.learn)
for(k in 1:(length(ts.valid))){
forec <- forecast(Arima(
c(ts.learn[min(0,lsize - k): lsize],ts.valid[1:k]), model = ar), h = 4)$mean
ar.perr.loop2 <- c(ar.perr.loop2, ts.valid[k+2] - forec[2])
ar.perr.loop3 <- c(ar.perr.loop3, ts.valid[k+3] - forec[3])
ar.perr.loop4 <- c(ar.perr.loop4, ts.valid[k+4] - forec[4])
}
ar.perr2 <- mean(ar.perr.loop2^2, na.rm = TRUE)
ar.perr2
ar.perr3
ar.perr3 <- mean(ar.perr.loop3^2, na.rm = TRUE)
ar.perr4 <- mean(ar.perr.loop4^2, na.rm = TRUE)
ar.perr3
ar.perr4
ar.perr2 <- cbind(index = i, lag = 2, method = "AR2", MSE = ar.perr2)
ar.perr3 <- cbind(index = i, lag = 3, method = "AR3", MSE = ar.perr3)
ar.perr4 <- cbind(index = i, lag = 4, method = "AR4", MSE = ar.perr4)
ar.perr2
ar.perr2 <- mean(ar.perr.loop2^2, na.rm = TRUE)
ar.perr3 <- mean(ar.perr.loop3^2, na.rm = TRUE)
ar.perr4 <- mean(ar.perr.loop4^2, na.rm = TRUE)
ar.perr2 <- data.frame(index = i, lag = 2, method = "AR2", MSE = ar.perr2)
ar.perr3 <- data.frame(index = i, lag = 3, method = "AR3", MSE = ar.perr3)
ar.perr4 <- data.frame(index = i, lag = 4, method = "AR4", MSE = ar.perr4)
ar.perr4
perr <- rbind(perr, rbind(ar.perr2, ar.perr3, ar.perr4))
perr
can.res <- rbind(cvloop(can, type = "AR", arpdq = c(2,1,0), arpdqs = c(1,1,0)),
cvloop(can, type = "DR"))
can.res
ggplot(data = subset(can.res, index == 1),
aes(x = method, y = meanMSE, fill = method)) + mytheme +
labs(x = "", y = "Cross-validation MSE", title = "Cross-validation MSE\n\nCanada") +
geom_bar(stat = "identity", width = 0.2) +
theme(legend.position = "none", axis.title.y=element_text(margin=margin(0,20,0,0))) +
coord_cartesian(ylim=c(20, 45))
ggplot(data = subset(can.res, index == 1),
aes(x = method, y = meanMSE, fill = method)) + mytheme +
labs(x = "", y = "Cross-validation MSE", title = "Cross-validation MSE\n\nCanada") +
geom_bar(stat = "identity", width = 0.2) +
theme(legend.position = "none", axis.title.y=element_text(margin=margin(0,20,0,0)))
ar.perr2
perr
str(perr)
tapply(perr$MSE, perr$method, mean)
res <- data.frame(perr)
res$MSE <- as.numeric(res$MSE)
res
means <- as.data.frame(tapply(res$MSE, res$method, mean))
means
means$method<- rownames(means)
colnames(means)[1]<- "meanMSE"
res <- merge(res, means, by = "method")
res
can.res <- rbind(cvloop(can, type = "AR", arpdq = c(2,1,0), arpdqs = c(1,1,0)),
cvloop(can, type = "DR"))
ggplot(data = subset(can.res, index == 1),
aes(x = method, y = meanMSE, fill = method)) + mytheme +
labs(x = "", y = "Cross-validation MSE", title = "Cross-validation MSE\n\nCanada") +
geom_bar(stat = "identity", width = 0.2) +
theme(legend.position = "none", axis.title.y=element_text(margin=margin(0,20,0,0))) +
coord_cartesian(ylim=c(0, 45))
can.res
source("cvloop.R")
can.res <- rbind(cvloop(can, type = "AR", arpdq = c(2,1,0), arpdqs = c(1,1,0)),
cvloop(can, type = "DR"))
can.res
ggplot(data = subset(can.res, index == 1),
aes(x = method, y = meanMSE, fill = method)) + mytheme +
labs(x = "", y = "Cross-validation MSE", title = "Cross-validation MSE\n\nCanada") +
geom_bar(stat = "identity", width = 0.2) +
theme(legend.position = "none", axis.title.y=element_text(margin=margin(0,20,0,0))) +
coord_cartesian(ylim=c(0, 45))
ggplot(data = subset(can.res, index == 1),
aes(x = method, y = meanMSE, fill = method)) + mytheme +
labs(x = "", y = "Cross-validation MSE", title = "Cross-validation MSE\n\nCanada") +
geom_bar(stat = "identity", width = 0.2) +
theme(legend.position = "none", axis.title.y=element_text(margin=margin(0,20,0,0)))
source("cvloop.R")
can.res <- rbind(cvloop(can, type = "AR", arpdq = c(2,1,0), arpdqs = c(1,1,0)),
cvloop(can, type = "DR"))
ggplot(data = subset(can.res, index == 1),
aes(x = method, y = meanMSE, fill = method)) + mytheme +
labs(x = "", y = "Cross-validation MSE", title = "Cross-validation MSE\n\nCanada") +
geom_bar(stat = "identity", width = 0.2) +
theme(legend.position = "none", axis.title.y=element_text(margin=margin(0,20,0,0)))
on.res <- rbind(cvloop(on, type = "AR", arpdq = c(2,1,0), arpdqs = c(1,1,0)),
cvloop(on, type = "DR"))
qc.res <- rbind(cvloop(qc, type = "AR", arpdq = c(2,1,0), arpdqs = c(1,1,0)),
cvloop(qc, type = "DR"))
bc.res <- rbind(cvloop(bc, type = "AR", arpdq = c(2,1,0), arpdqs = c(1,1,0)),
cvloop(bc, type = "DR"))
ab.res <- rbind(cvloop(ab, type = "AR", arpdq = c(2,1,0), arpdqs = c(1,1,0)),
cvloop(ab, type = "DR"))
a <- rbind(c(1,0,-2), c(-3,1,4), c(2,-3,4))
solove(a)
solve(a)
